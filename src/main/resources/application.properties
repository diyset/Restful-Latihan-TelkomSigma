# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
# DB TELKOM JAVA
#spring.datasource.url = jdbc:mysql://10.10.105.103:3306/java
#spring.datasource.username = root
#spring.datasource.password = root

# DB LOCALHOST TELKOM SIGMA
spring.datasource.url = jdbc:mysql://localhost:3306/telkomsigma
spring.datasource.username = root
spring.datasource.password = 

#spring.datasource.url = jdbc:mysql://localhost:3306/test
#spring.datasource.username = root
#spring.datasource.password = 

# Banner Spring Boot
spring.main.banner-mode=console

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

spring.mvc.view.prefix= /WEB-INF/jsp/
spring.mvc.view.suffix= .jsp
 
# Show or not log for each sql query
spring.jpa.show-sql = true

# Loggin
logging.level.org.springframework=TRACE
logging.level.com.diansetiyadi=TRACE
logging.level.org.springframework.web=ERROR
logging.level.com.com.diansetiyadi.latihanspringboot==DEBUG
# Logging pattern for the console
logging.pattern.console= "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level - %msg%n"
# Logging pattern for file
logging.pattern.file= "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

logging.file=/Users/user/application.log
# End Login

# Messages.Properties
spring.messages.basename=validation

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.generate-ddl = true
# Show Sql Hibernate
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql=trace

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect